datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model DeliveryPoint {
    uuid String @id

    code                String
    name                String
    addressComment      String?
    nearestStation      String?
    nearestMetroStation String?
    workTime            String

    phones Phone[]

    email     String?
    note      String?
    type      String
    ownerCode String

    takeOnly              Boolean
    isHandout             Boolean
    isReception           Boolean
    isDressingRoom        Boolean
    isMarketplace         Boolean?
    isLtl                 Boolean?
    haveCashless          Boolean
    haveCash              Boolean
    haveFastPaymentSystem Boolean
    allowedCod            Boolean

    site String?

    officeImages       OfficeImage[]
    workTimes          WorkTime[]
    workTimeExceptions WorkTimeException[]

    weightMin Int?
    weightMax Int?

    dimensions Dimensions[]
    location   Location?

    distance Int?

    fulfillment Boolean
}

model Phone {
    id String @id @default(uuid())

    number     String
    additional String?

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String
}

model OfficeImage {
    id String @id @default(uuid())

    number Int?
    url    String

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String
}

model WorkTime {
    id String @id @default(uuid())

    day  Int
    time String

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String
}

model WorkTimeException {
    id String @id @default(uuid())

    dateStart String
    dateEnd   String
    timeStart String?
    timeEnd   String?
    isWorking Boolean

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String
}

model Dimensions {
    id String @id @default(uuid())

    width  Int
    height Int
    depth  Int

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String
}

model Location {
    id String @id @default(uuid())

    countryCode String
    regionCode  Int
    region      String
    cityCode    Int
    city        String
    fiasGuid    String?
    postalCode  String?
    longitude   Float
    latitude    Float
    address     String
    addressFull String
    cityUuid    String?

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String        @unique
}
