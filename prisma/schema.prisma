datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model DeliveryPoint {
    uuid String @id @db.Uuid

    code                String
    name                String
    addressComment      String?
    nearestStation      String?
    nearestMetroStation String?
    workTime            String

    phones Phone[]

    email     String?
    note      String?
    type      String
    ownerCode String

    takeOnly              Boolean
    isHandout             Boolean
    isReception           Boolean
    isDressingRoom        Boolean
    isMarketplace         Boolean?
    isLtl                 Boolean?
    haveCashless          Boolean
    haveCash              Boolean
    haveFastPaymentSystem Boolean
    allowedCod            Boolean

    site String?

    officeImages       OfficeImage[]
    workTimes          WorkTime[]
    workTimeExceptions WorkTimeException[]

    weightMin Int?
    weightMax Int?

    dimensions Dimensions[]
    location   Location?

    distance Int?

    fulfillment Boolean

    geoData GeoData?
}

model Phone {
    id String @id @default(uuid()) @db.Uuid

    number     String
    additional String?

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String        @db.Uuid
}

model OfficeImage {
    id String @id @default(uuid()) @db.Uuid

    number Int?
    url    String

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String        @db.Uuid
}

model WorkTime {
    id String @id @default(uuid()) @db.Uuid

    day  Int
    time String

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String        @db.Uuid
}

model WorkTimeException {
    id String @id @default(uuid()) @db.Uuid

    dateStart String
    dateEnd   String
    timeStart String?
    timeEnd   String?
    isWorking Boolean

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String        @db.Uuid
}

model Dimensions {
    id String @id @default(uuid()) @db.Uuid

    width  Int
    height Int
    depth  Int

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String        @db.Uuid
}

model Location {
    id String @id @default(uuid()) @db.Uuid

    countryCode String
    regionCode  Int
    region      String?
    cityCode    Int
    city        String
    fiasGuid    String?
    postalCode  String?
    longitude   Float
    latitude    Float
    address     String
    addressFull String
    cityUuid    String?

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String        @unique @db.Uuid
}

model GeoData {
    id String @id @default(uuid()) @db.Uuid

    coordinates Unsupported("geography(Point, 4326)")

    deliveryPoint   DeliveryPoint @relation(fields: [deliveryPointId], references: [uuid], onDelete: Cascade)
    deliveryPointId String        @unique @db.Uuid
}
